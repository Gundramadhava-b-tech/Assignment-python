DATA TYPES
* A datatype tells the compiler or interpreter how the programmer intends to use the data. Data Types
Numbers Boolean Sequences Sets Dictionary
Integer Floating Complex Strings Tuple List
* In Python programming, data types are classes and variables are instances of those classes.
Numbers:
* stores numerical values.
* immutables (ie, values/items cannot be changed)
Integer Float Complex
=> represented as => Written with => They are a decimal point of the form Tuple:
'int'
* consist of collection of values
a+bj, where separated by commas.
=> positive or => dividing the => the fractional floats and * enclosed in parenthesi ()
negative whole integer and a parts
* immutable
numbers with no decimal point.
j represents
the square
root of -1.
Eg: 56
Eg: 56.778
Eg: square root of -1 is
a complex
number
Eg: >>> a= (1,2,3,4,5,6)
List:
* contains items separated by commas.
* mutable
* enclosed within square brackets []
Eg: >>> a = [1,2,3,4,5,6]
Sequences:
* Ordered collection of items indexed by positive integers.
* combination of mutable and
immutable data types.
Sequence
Strings Tuples Lists
Strings:
* series or sequence of letters, numbers and special characters.
=> single quotes (')
Eg: 'This is a string'
=> double quotes (" ")
Eg: "This is a string"
=> tripla quotes (""" """)
Eg: """ This is a paragraph.
It is made up of multiple lines and sentences."""
Boolean:
* has two values -> 0 + 1
* O represents False
* 1 represents True
Sets Eg: >>> 3>=5
False
* collection of items that are unordered and unindexed.
* written with curly brackets.
Eg: >>> a= {'apple', 'orange', 'grape'}
Dictionary:
* used to store data values
in key: value pairs
* ordered, mutable
* do not allow duplicates
Eg: car = { "brand": "Ford",
"model": "Mustang",
"year": 1964 }
Expressions:
* Combination of operators and operands that is interpreted to produce some other value.
Types:
1. Constant expressions => x=15+1.3
operand1 operator operand2
2. Arithmetic expressions => x=40
y=12
add: x+y
b=12+ int (b)
3. Integral expressions =>
4. Floating expressions => Eg: c=x/y
5. Relational expressions => Eg: c=x>y
6. Logical expressions => Eg: P=(10==9)
Q: (17<=9)
R: Food<
